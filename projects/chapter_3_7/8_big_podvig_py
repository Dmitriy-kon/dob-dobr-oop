from random import randint


class Cell:
    def __init__(self) -> None:
        self.__is_mine = False
        self.__number = 0
        self.__is_open = False

    @property
    def is_mine(self):
        return self.__is_mine

    @is_mine.setter
    def is_mine(self, value):
        if isinstance(value, bool):
            self.__is_mine = value
        else:
            raise ValueError("недопустимое значение атрибута")

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        if isinstance(value, int) and 0 <= value <= 8:
            self.__number = value
        else:
            raise ValueError("недопустимое значение атрибута")

    @property
    def is_open(self):
        return self.__is_open

    @is_open.setter
    def is_open(self, value):
        if isinstance(value, bool):
            self.__is_open = value
        else:
            raise ValueError("недопустимое значение атрибута")

    def __bool__(self):
        return self.is_open


class GamePole:
    __instance = None

    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
        return cls.__instance

    def __del__(self):
        GamePole.__instance = None

    def __init__(self, N, M, total_mines) -> None:
        self._n = N
        self._m = M
        self._total_mines = total_mines
        self.__pole_cells = tuple(tuple(Cell() for _ in range(M)) for _ in range(N))
        self.init_pole()

    @property
    def pole(self):
        return self.__pole_cells

    def init_pole(self):
        for row in self.__pole_cells:
            for x in row:
                x.is_open = False
                x.is_mine = False

        m = 0
        while m < self._total_mines:
            i = randint(0, self._n - 1)
            j = randint(0, self._m - 1)

            if self.pole[i][j].is_mine:
                continue

            self.__pole_cells[i][j].is_mine = True
            m += 1

        indx = (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)
        for x in range(self._n):
            for y in range(self._m):
                if not self.pole[x][y].is_mine:
                    mines = sum(
                        self.pole[x + i][y + j].is_mine
                        for i, j in indx
                        if 0 <= x + i < self._n and 0 <= y + j < self._m
                    )
                    self.pole[x][y].number = mines

    def open_cell(self, i, j):
        if not 0 <= i < self._n or not 0 <= j < self._m:
            raise IndexError("некорректные индексы i, j клетки игрового поля")
        self.pole[i][j].is_open = True

    def show_pole(self):
        for row in self.pole:
            print(*map(lambda x: "#" if not x.is_open else x.number if not x.is_mine else "*", row))
            
pole = GamePole(10, 10, 10)
# pole.init_pole()
if pole.pole[0][1]:
    pole.open_cell(0, 1)
    pole.open_cell(2, 1)
pole.show_pole()
