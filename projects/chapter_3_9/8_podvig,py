class StackObj:
    def __init__(self, data) -> None:
        self.__data = data
        self.__next = None

    @property
    def next(self):
        return self.__next

    @next.setter
    def next(self, data):
        self.__next = data

    @property
    def data(self):
        return self.__data

    @data.setter
    def data(self, new_data):
        self.__data = new_data

    def __repr__(self) -> str:
        return f"StackObj({self.data},)"


class Stack:
    __top = None

    def __init__(self) -> None:
        self._length = 0
    
    @property
    def top(self):
        return self.__top

    def push_back(self, obj: StackObj):
        if not self.__top:
            self._length = 1
            self.__top = obj
            return

        spam = self._get_last_object()
        spam.next = obj
        
        self._length += 1
    
    def push_front(self, obj: StackObj):
        if not self.__top:
            self.__top = obj
            return
        
        obj.next = self.__top
        self.__top = obj
        
        self._length += 1

    def _get_last_object(self):
        # obj = self.__top
        # while obj:
        #     if obj.next:
        #         obj = obj.next
        #     else:
        #         return obj
        spam = None
        for i in self:
            spam = i
        return spam

    def _check_index(self, indx):
        if not (0 <= indx < self._length):
            raise IndexError('неверный индекс')
    
    def __getitem__(self, item):
        self._check_index(item)
        spam = 0
        for i in self:
            if spam == item:
                return i.data
            spam += 1
    
    def __setitem__(self, key, value):
        self._check_index(key)
        spam = 0
        for i in self:
            if spam == key:
                print(i)
                i.data = value
            spam += 1
        
    
    def __iter__(self):
        obj = self.__top
        while obj:
            yield obj
            obj = obj.next
    
    def __len__(self):
        return self._length

st = Stack()
st.push_back(StackObj("1"))
st.push_front(StackObj("2"))
st.push_front(StackObj("3"))
print(*st, sep=" ")
# print(st[1])
st[1] = "11" 
print(*st, sep=" ")


# assert st[0] == "2" and st[1] == "1", "неверные значения данных из объектов стека, при обращении к ним по индексу"

# st[0] = "0"
# assert st[0] == "0", "получено неверное значение из объекта стека, возможно, некорректно работает присваивание нового значения объекту стека"

# for obj in st:
#     assert isinstance(obj, StackObj), "при переборе стека через цикл должны возвращаться объекты класса StackObj"

# try:
#     a = st[3]
# except IndexError:
#     assert True
# else:
#     assert False, "не сгенерировалось исключение IndexError"